# Note: if this directive is deleted, the default image is specified by the
# runner configuration (ci.robotics-erlangen.de:/etc/gitlab-runner/config.toml
default:
  image: ci:ubuntu-20.04

stages:
  - build
  - test
  - memcheck


.compile-ra-template:
  script:
    - mkdir -p build
    - cd build
    - cmake -GNinja -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
    # limit average load to enforce some load distribution between different ninja instances
    - cmake --build . -- -l $(( $(nproc) * 3 / 2))
  stage: build
  cache:
    # Increase the number in the cache key to start with
    # a fresh build cache. This is only useful in case of
    # build system bug and/or updates of ExternalProjects!
    key: "$CI_JOB_NAME-2"
    paths:
      - build/
  artifacts:
    paths:
      - build/bin/
    expire_in: 1 day

.test-template:
  script:
    - "sh strategy/typescript/setup.sh"
    - "echo running test \"$TEST_PATTERN\""
    - "cd build"
    - "cmake -GNinja .."
    - "ctest --output-on-failure -R \"$TEST_PATTERN\""
  stage: test
  cache:
    # Increase the number in the cache key to start with
    # a fresh build cache. This is only useful in case of
    # build system bug and/or updates of ExternalProjects!
    key: "$CI_JOB_NAME-2"
    paths:
      - build/
  variables:
    TEST_PATTERN: "."

#cross-compile-ra:
#  script:
#    - mkdir -p build
#    - cd build
#    - ../cmake/mxe-cmake-wrapper -DDOWNLOAD_V8=TRUE -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
#    # limit average load to enforce some load distribution between different ninja instances
#    # only compile ra, otherwise the artifact .zip of the bin folder will be to large
#    - ../cmake/mxe-cmake-wrapper --build . --target ra -- -l $(( $(nproc) * 3 / 2))
#    - ../cmake/mxe-cmake-wrapper --build . --target assemble --
#  stage: build
#  cache:
#    # Increase the number in the cache key to start with
#    # a fresh build cache. This is only useful in case of
#    # build system bug and/or updates of ExternalProjects!
#    key: "$CI_JOB_NAME-2"
#    paths:
#      - build/
#  artifacts:
#    paths:
#      - build/bin/
#    expire_in: 1 day
#  image: ci:ubuntu-20.04-cross-compile-windows
#  only:
#    - schedules


.sanitize-template:
  script:
    - "sh strategy/typescript/setup.sh"
    - "mkdir -p build"
    - "cd build"
    - "cmake -GNinja -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_FLAGS=\"-fsanitize=address\" -DCMAKE_BUILD_TYPE=Debug .."
    - "cmake --build . --target check -- -l $(( $(nproc) * 3 / 2))"
  stage: memcheck
  cache:
    # Increase the number in the cache key to start with
    # a fresh build cache. This is only useful in case of
    # build system bug and/or updates of ExternalProjects!
    key: "$CI_JOB_NAME"
    paths:
      - build/
  dependencies: []


compile-ra:
  extends: .compile-ra-template
  except:
    - schedules

sanitize:
  extends: .sanitize-template
  except:
    - schedules

tests:
  extends: .test-template
  dependencies:
    - compile-ra
  except:
    - schedules


.compile-ra-schedule:
  extends: .compile-ra-template
  only:
    - schedules

compile-ra-18.04:
  extends: .compile-ra-schedule
  image: ci:ubuntu-18.04

compile-ra-18.04-no-v8:
  extends: .compile-ra-schedule
  image: ci:ubuntu-18.04-no-v8

compile-ra-20.04:
  extends: .compile-ra-schedule
  image: ci:ubuntu-20.04

compile-ra-22.04:
  extends: .compile-ra-schedule
  image: ci:ubuntu-22.04

.test-schedule:
  extends: .test-template
  only:
    - schedules

tests-18.04:
  extends: .test-schedule
  image: ci:ubuntu-18.04
  dependencies:
    - compile-ra-18.04
  needs: [compile-ra-18.04]

tests-18.04-no-v8:
  extends: .test-schedule
  image: ci:ubuntu-18.04-no-v8
  dependencies:
    - compile-ra-18.04-no-v8
  needs: [compile-ra-18.04-no-v8]

tests-20.04:
  extends: .test-schedule
  image: ci:ubuntu-20.04
  dependencies:
    - compile-ra-20.04
  needs: [compile-ra-20.04]

tests-22.04:
  extends: .test-schedule
  image: ci:ubuntu-22.04
  dependencies:
    - compile-ra-22.04
  needs: [compile-ra-22.04]


.sanitize-schedule:
  extends: .sanitize-template
  only:
    - schedules

sanitize-18.04:
  extends: .sanitize-schedule
  image: ci:ubuntu-18.04
  needs: [tests-18.04]

sanitize-18.04-no-v8:
  extends: .sanitize-schedule
  image: ci:ubuntu-18.04-no-v8
  needs: [tests-18.04-no-v8]

sanitize-20.04:
  extends: .sanitize-schedule
  image: ci:ubuntu-20.04
  needs: [tests-20.04]

sanitize-22.04:
  extends: .sanitize-schedule
  image: ci:ubuntu-22.04
  needs: [tests-22.04]
