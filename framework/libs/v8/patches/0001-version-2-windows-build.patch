From f889818214dc1a217ffde00f4f83a9e81c99f677 Mon Sep 17 00:00:00 2001
From: Paul Bergmann <paul.bergmann@robotics-erlangen.de>
Date: Thu, 8 Sep 2022 22:41:15 +0200
Subject: [PATCH] version-2-windows-build

---
 .patched                             |   1 +
 config/BUILD.gn                      |  15 ++-
 config/BUILDCONFIG.gn                |  18 +++-
 config/compiler/BUILD.gn             | 112 +++++++++++++-------
 config/win/BUILD.gn                  | 153 +++++++++++++++++++--------
 config/win/manifest.gni              |  12 ++-
 config/win/visual_studio_version.gni |  30 +++---
 toolchain/gcc_toolchain.gni          |  67 ++++++++++--
 toolchain/win/BUILD.gn               |  63 ++++++++---
 win/BUILD.gn                         |   4 +-
 10 files changed, 337 insertions(+), 138 deletions(-)
 create mode 100644 .patched

diff --git a/.patched b/.patched
new file mode 100644
index 000000000..f7cc34381
--- /dev/null
+++ b/.patched
@@ -0,0 +1 @@
+b1f56b4a8a7cf9f707f7966104278777f9994b13
diff --git a/config/BUILD.gn b/config/BUILD.gn
index 8fc6a82df..51de28b78 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -115,13 +115,13 @@ config("debug") {
     defines += [ "DYNAMIC_ANNOTATIONS_PREFIX=NACL_" ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (!enable_iterator_debugging && !use_custom_libcxx) {
       # Iterator debugging is enabled by default by the compiler on debug
       # builds, and we have to tell it to turn it off.
       defines += [ "_HAS_ITERATOR_DEBUGGING=0" ]
     }
-  } else if ((is_linux || is_chromeos) && current_cpu == "x64" &&
+  } else if ((is_linux || is_chromeos || is_mingw) && current_cpu == "x64" &&
              enable_iterator_debugging) {
     # Enable libstdc++ debugging facilities to help catch problems early, see
     # http://crbug.com/65151 .
@@ -156,7 +156,7 @@ config("release") {
 
 # This config defines the default libraries applied to all targets.
 config("default_libs") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # TODO(brettw) this list of defaults should probably be smaller, and
     # instead the targets that use the less common ones (e.g. wininet or
     # winspool) should include those explicitly.
@@ -285,8 +285,13 @@ group("shared_library_deps") {
 
 # Windows linker setup for EXEs and DLLs.
 if (is_win) {
-  _windows_linker_configs = [
-    "//build/config/win:sdk_link",
+  _windows_linker_configs = []
+  if(!is_mingw) {
+    _windows_linker_configs += [
+      "//build/config/win:sdk_link",
+    ]
+  }
+  _windows_linker_configs += [
     "//build/config/win:common_linker_setup",
   ]
 }
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index c737e53c2..5ca3a70ef 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -135,12 +135,16 @@ declare_args() {
   # set "is_official_build" to true for any build intended to ship to end-users.
   is_official_build = false
 
+  # Set to true when compiling with the MinGW GCC compiler on the MSYS2 environment
+  is_mingw = getenv("MSYSTEM") != "" && getenv("MSYSTEM") != "MSYS"
+
   # Set to true when compiling with the Clang compiler.
   is_clang = current_os != "linux" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
               current_cpu != "ppc64" && current_cpu != "ppc" &&
               current_cpu != "mips" && current_cpu != "mips64" &&
-              current_cpu != "riscv64")
+              current_cpu != "riscv64") ||
+              (getenv("CXX") == "clang" || getenv("CXX") == "clang++")
 
   # Allows the path to a custom target toolchain to be injected as a single
   # argument, and set as the default toolchain.
@@ -206,13 +210,17 @@ if (host_toolchain == "") {
     # configurations we support this will always work and it saves build steps.
     # Windows ARM64 targets require an x64 host for cross build.
     if (target_cpu == "x86" || target_cpu == "x64") {
-      if (is_clang) {
+      if (is_clang && !is_mingw) {
         host_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+      } else if (is_mingw) {
+        host_toolchain = "//build/toolchain/win:mingw_$target_cpu"
       } else {
         host_toolchain = "//build/toolchain/win:$target_cpu"
       }
-    } else if (is_clang) {
+    } else if (is_clang && !is_mingw) {
       host_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
+    } else if (is_mingw) {
+      host_toolchain = "//build/toolchain/win:mingw_$host_cpu"
     } else {
       host_toolchain = "//build/toolchain/win:$host_cpu"
     }
@@ -249,8 +257,10 @@ if (target_os == "android") {
 } else if (target_os == "win") {
   # On Windows, we use the same toolchain for host and target by default.
   # Beware, win cross builds have some caveats, see docs/win_cross.md
-  if (is_clang) {
+  if (is_clang && !is_mingw) {
     _default_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+  } else if (is_mingw) {
+    _default_toolchain = "//build/toolchain/win:mingw_$target_cpu"
   } else {
     _default_toolchain = "//build/toolchain/win:$target_cpu"
   }
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index b6aaae9b6..6de19a854 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -310,8 +310,8 @@ config("compiler") {
   }
 
   # In general, Windows is totally different, but all the other builds share
-  # some common compiler and linker configuration.
-  if (!is_win) {
+  # some common GCC configuration
+  if (!is_win || is_mingw) {
     # Common POSIX compiler flags setup.
     # --------------------------------
     cflags += [ "-fno-strict-aliasing" ]  # See http://crbug.com/32204
@@ -325,7 +325,7 @@ config("compiler") {
       } else {
         cflags += [ "-fstack-protector" ]
       }
-    } else if ((is_posix && !is_chromeos && !is_nacl) || is_fuchsia) {
+    } else if ((is_posix && !is_chromeos && !is_nacl) || is_fuchsia || is_mingw) {
       # TODO(phajdan.jr): Use -fstack-protector-strong when our gcc supports it.
       # See also https://crbug.com/533294
       if (current_os != "zos") {
@@ -338,6 +338,11 @@ config("compiler") {
       } else if (current_os != "aix") {
         # Not available on aix.
         cflags += [ "-fstack-protector" ]
+        if (is_mingw) {
+          # In MingW's GCC, -fstack-protector needs to be passed to the linker
+          # as well for it to link against the ssp library
+          ldflags += [ "-fstack-protector" ]
+        }
       }
     }
 
@@ -371,7 +376,7 @@ config("compiler") {
 
   # Non-Apple Posix and Fuchsia compiler flags setup.
   # -----------------------------------
-  if ((is_posix && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_apple) || is_fuchsia || is_mingw) {
     if (enable_profiling) {
       if (!is_debug) {
         cflags += [ "-g" ]
@@ -521,11 +526,11 @@ config("compiler") {
     # TODO(thakis): Make the driver pass --color-diagnostics to the linker
     # if -fcolor-diagnostics is passed to it, and pass -fcolor-diagnostics
     # in ldflags instead.
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # On Windows, we call the linker directly, instead of calling it through
       # the driver.
       ldflags += [ "--color-diagnostics" ]
-    } else {
+    } else if (!is_clang) {
       ldflags += [ "-Wl,--color-diagnostics" ]
     }
   }
@@ -568,7 +573,7 @@ config("compiler") {
 
   # C11/C++11 compiler flags setup.
   # ---------------------------
-  if (is_linux || is_chromeos || is_android || (is_nacl && is_clang) ||
+  if (is_linux || is_mingw || is_chromeos || is_android || (is_nacl && is_clang) ||
       current_os == "aix") {
     if (is_clang) {
       standard_prefix = "c"
@@ -649,7 +654,7 @@ config("compiler") {
     # should be able to better manage binary size increases on its own.
     import_instr_limit = 30
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
@@ -703,7 +708,7 @@ config("compiler") {
     # arm32.
     if (!is_android || current_cpu == "arm64") {
       cflags += [ "-fwhole-program-vtables" ]
-      if (!is_win) {
+      if (!is_win || is_mingw) {
         ldflags += [ "-fwhole-program-vtables" ]
       }
     }
@@ -721,7 +726,7 @@ config("compiler") {
   if (compiler_timing) {
     if (is_clang && !is_nacl) {
       cflags += [ "-ftime-trace" ]
-    } else if (is_win) {
+    } else if (is_win && !is_mingw) {
       cflags += [
         # "Documented" here:
         # http://aras-p.info/blog/2017/10/23/Best-unknown-MSVC-flag-d2cgsummary/
@@ -741,9 +746,9 @@ config("compiler") {
   # jumps. Turn it off by default and enable selectively for targets where it's
   # beneficial.
   if (use_lld && !enable_call_graph_profile_sort) {
-    if (is_win) {
+    if (is_win && !is_mingw) {
       ldflags += [ "/call-graph-profile-sort:no" ]
-    } else {
+    } else if (!is_mingw || !is_clang) {
       ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
     }
   }
@@ -779,7 +784,7 @@ config("compiler") {
   # Assign any flags set for the C compiler to asmflags so that they are sent
   # to the assembler. The Windows assembler takes different types of flags
   # so only do so for posix platforms.
-  if (is_posix || is_fuchsia) {
+  if (is_posix || is_fuchsia || is_mingw) {
     asmflags += cflags
     asmflags += cflags_c
   }
@@ -881,7 +886,7 @@ config("compiler_cpu_abi") {
     configs += [ "//build/config/chromeos:compiler_cpu_abi" ]
   }
 
-  if ((is_posix && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_apple) || is_fuchsia || is_mingw) {
     # CPU architecture. We may or may not be doing a cross compile now, so for
     # simplicity we always explicitly set the architecture.
     if (current_cpu == "x64") {
@@ -1219,7 +1224,7 @@ config("compiler_deterministic") {
   # Eliminate build metadata (__DATE__, __TIME__ and __TIMESTAMP__) for
   # deterministic build.  See https://crbug.com/314403
   if (!is_official_build) {
-    if (is_win && !is_clang) {
+    if (is_win && !is_clang && !is_mingw) {
       cflags += [
         "/wd4117",  # Trying to define or undefine a predefined macro.
         "/D__DATE__=",
@@ -1261,7 +1266,7 @@ config("compiler_deterministic") {
       asmflags = [ "-Wa,-fdebug-compilation-dir,." ]
     }
 
-    if (is_win && use_lld) {
+    if (is_win && use_lld && !is_mingw) {
       if (symbol_level == 2 || (is_clang && using_sanitizer)) {
         # Absolutize source file paths for PDB. Pass the real build directory
         # if the pdb contains source-level debug information and if linker
@@ -1415,7 +1420,7 @@ config("default_warnings") {
   cflags_cc = []
   ldflags = []
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (treat_warnings_as_errors) {
       cflags += [ "/WX" ]
     }
@@ -1490,15 +1495,34 @@ config("default_warnings") {
       # files.
       cflags += [ "-Wno-packed-not-aligned" ]
     }
+
+    if (is_mingw) {
+      cflags += [
+        "-Wno-attributes",           # "__decspec(dllimport) inline"
+        "-Wno-format",               # PRIu64 llu support on MinGW
+      ]
+      if (!is_clang) {
+        cflags_cc += [
+          "-Wno-subobject-linkage",    # Tests having code in header files
+        ]
+        cflags += [
+          "-Wno-unused-but-set-variable",
+          "-Wno-stringop-overflow",    # False positive overflow error on gcc 10
+        ]
+      }
+    }
   }
 
   # Common Clang and GCC warning setup.
-  if (!is_win || is_clang) {
+  if (!is_win || is_clang || is_mingw) {
     cflags += [
       # Disables.
       "-Wno-missing-field-initializers",  # "struct foo f = {0};"
       "-Wno-unused-parameter",  # Unused function parameters.
     ]
+    if(is_clang){
+      cflags += ["-Wno-range-loop-construct"] # Use of "conditionally-supported" offsetof in c++17
+    }
   }
 
   if (is_clang) {
@@ -1610,7 +1634,7 @@ config("prevent_unsafe_narrowing") {
 # part of Chromium.
 
 config("chromium_code") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (is_clang) {
       cflags = [ "/W4" ]  # Warning level 4.
 
@@ -1695,7 +1719,7 @@ config("no_chromium_code") {
   cflags_cc = []
   defines = []
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (is_clang) {
       cflags += [ "/W3" ]  # Warning level 3.
     }
@@ -1790,7 +1814,7 @@ config("noshadowing") {
 # Allows turning Run-Time Type Identification on or off.
 
 config("rtti") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags_cc = [ "/GR" ]
   } else {
     cflags_cc = [ "-frtti" ]
@@ -1800,7 +1824,7 @@ config("rtti") {
 config("no_rtti") {
   # Some sanitizer configs may require RTTI to be left enabled globally
   if (!use_rtti) {
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -1842,7 +1866,7 @@ config("thin_archive") {
   # archives.
   # TODO(crbug.com/1221615): Enable on is_apple if use_lld once that no longer
   # confuses lldb.
-  if ((is_posix && !is_nacl && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_nacl && !is_apple) || is_fuchsia || is_mingw) {
     arflags = [ "-T" ]
   } else if (is_win && use_lld) {
     arflags = [ "/llvmlibthin" ]
@@ -1855,7 +1879,7 @@ config("thin_archive") {
 # Note: exceptions are disallowed in Google code.
 
 config("exceptions") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Enables exceptions in the STL.
     if (!use_custom_libcxx) {
       defines = [ "_HAS_EXCEPTIONS=1" ]
@@ -1864,11 +1888,17 @@ config("exceptions") {
   } else {
     cflags_cc = [ "-fexceptions" ]
     cflags_objcc = cflags_cc
+    if (is_mingw && exclude_unwind_tables) {
+      # With exceptions explicitly allowed,
+      # override exclude_unwind_tables or
+      # linking will fail on MinGW
+      cflags_cc += [ "-funwind-tables", "-fasynchronous-unwind-tables" ]
+    }
   }
 }
 
 config("no_exceptions") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Disables exceptions in the STL.
     # libc++ uses the __has_feature macro to control whether to use exceptions,
     # so defining this macro is unnecessary. Defining _HAS_EXCEPTIONS to 0 also
@@ -1934,7 +1964,7 @@ config("no_incompatible_pointer_warnings") {
 
 # Shared settings for both "optimize" and "optimize_max" configs.
 # IMPORTANT: On Windows "/O1" and "/O2" must go before the common flags.
-if (is_win) {
+if (is_win && !is_mingw) {
   common_optimize_on_cflags = [
     "/Ob2",  # Both explicit and auto inlining.
     "/Oy-",  # Disable omitting frame pointers, must be after /O2.
@@ -2040,7 +2070,7 @@ config("default_stack_frames") {
 
 # Default "optimization on" config.
 config("optimize") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (chrome_pgo_phase != 2) {
       # Favor size over speed, /O1 must be before the common flags.
       # /O1 implies /Os and /GF.
@@ -2078,7 +2108,7 @@ config("optimize") {
 
 # Turn off optimizations.
 config("no_optimize") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [
       "/Od",  # Disable optimization.
       "/Ob0",  # Disable all inlining (on by default).
@@ -2130,7 +2160,7 @@ config("optimize_max") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2163,7 +2193,7 @@ config("optimize_speed") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2289,14 +2319,14 @@ config("win_pdbaltpath") {
   # so there's minimal downside to always using this. However, post-mortem
   # debugging of Chromium crash dumps and ETW tracing can be complicated by this
   # switch so an option to omit it is important.
-  if (!use_full_pdb_paths) {
+  if (!use_full_pdb_paths && !is_mingw) {
     ldflags = [ "/pdbaltpath:%_PDB%" ]
   }
 }
 
 # Full symbols.
 config("symbols") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (is_clang) {
       cflags = [ "/Z7" ]  # Debug information in the .obj files.
     } else {
@@ -2340,7 +2370,8 @@ config("symbols") {
     # build-directory-independent output. pnacl and nacl-clang do support that
     # flag, so we can use use -g1 for pnacl and nacl-clang compiles.
     # gcc nacl is is_nacl && !is_clang, pnacl and nacl-clang are && is_clang.
-    if ((!is_nacl || is_clang) && current_os != "zos") {
+    # MingW can not handle the size of the debu symbols generated.
+    if (!is_mingw && (!is_nacl || is_clang) && current_os != "zos") {
       cflags += [ "-g2" ]
     }
 
@@ -2393,7 +2424,9 @@ config("symbols") {
         # sections (llvm.org/PR34820).
         cflags += [ "-ggnu-pubnames" ]
       }
-      ldflags += [ "-Wl,--gdb-index" ]
+      if (!(is_mingw && is_clang)) {
+        ldflags += [ "-Wl,--gdb-index" ]
+      }
     }
   }
 
@@ -2421,7 +2454,7 @@ config("symbols") {
 # This config guarantees to hold symbol for stack trace which are shown to user
 # when crash happens in unittests running on buildbot.
 config("minimal_symbols") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Functions, files, and line tables only.
     cflags = []
 
@@ -2493,7 +2526,7 @@ config("minimal_symbols") {
 # told to not generate debug information and the linker then just puts function
 # names in the final debug information.
 config("no_symbols") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     ldflags = [ "/DEBUG" ]
 
     # All configs using /DEBUG should include this:
@@ -2589,6 +2622,11 @@ buildflag_header("compiler_buildflags") {
 config("cet_shadow_stack") {
   if (enable_cet_shadow_stack && is_win) {
     assert(target_cpu == "x64")
-    ldflags = [ "/CETCOMPAT" ]
+    if (is_mingw) {
+      ldflags = [ "-fcf-protection=full" ]
+      cflags = [ "-fcf-protection=full" ]
+    } else {
+      ldflags = [ "/CETCOMPAT" ]
+    }
   }
 }
diff --git a/config/win/BUILD.gn b/config/win/BUILD.gn
index abde4a97d..6452afdb6 100644
--- a/config/win/BUILD.gn
+++ b/config/win/BUILD.gn
@@ -52,6 +52,7 @@ declare_args() {
 # is applied to all targets. It is here to separate out the logic that is
 # Windows-only.
 config("compiler") {
+  if (!is_mingw) {
   if (current_cpu == "x86") {
     asmflags = [
       # When /safeseh is specified, the linker will only produce an image if it
@@ -214,6 +215,17 @@ config("compiler") {
     # the source file is a no-op.
     "/ignore:4221",
   ]
+  } else {
+    # is_mingw
+    cflags = [
+      "-Wa,-mbig-obj"
+    ]
+    if (!is_clang) {
+      cflags += [
+        "-fno-keep-inline-dllexport"
+      ]
+    }
+  }
 }
 
 # This is included by reference in the //build/config/compiler:runtime_library
@@ -317,19 +329,27 @@ config("sdk_link") {
 # targets who want different library configurations can remove this and specify
 # their own.
 config("common_linker_setup") {
-  ldflags = [
-    "/FIXED:NO",
-    "/ignore:4199",
-    "/ignore:4221",
-    "/NXCOMPAT",
-    "/DYNAMICBASE",
-  ]
-
-  if (win_linker_timing) {
-    ldflags += [
-      "/time",
-      "/verbose:incr",
+  if(is_mingw) {
+    # Enable DEP and ASLR
+    ldflags = [
+      "-Wl,-dynamicbase",
+      "-Wl,-nxcompat",
+     ]
+  } else {
+    ldflags = [
+      "/FIXED:NO",
+      "/ignore:4199",
+      "/ignore:4221",
+      "/NXCOMPAT",
+      "/DYNAMICBASE",
     ]
+
+    if (win_linker_timing) {
+      ldflags += [
+        "/time",
+        "/verbose:incr",
+      ]
+    }
   }
 }
 
@@ -338,7 +358,7 @@ config("default_cfg_compiler") {
   # This is needed to allow functions to be called by code that is built
   # with CFG enabled, such as system libraries.
   # The CFG guards are only emitted if |win_enable_cfg_guards| is enabled.
-  if (is_clang) {
+  if (is_clang && !is_mingw) {
     if (win_enable_cfg_guards) {
       cflags = [ "/guard:cf" ]
     } else {
@@ -353,7 +373,7 @@ config("disable_guards_cfg_compiler") {
   # Emit table of address-taken functions for Control-Flow Guard (CFG).
   # This is needed to allow functions to be called by code that is built
   # with CFG enabled, such as system libraries.
-  if (is_clang) {
+  if (is_clang && !is_mingw) {
     cflags = [ "/guard:cf,nochecks" ]
   }
 }
@@ -366,7 +386,7 @@ config("cfi_linker") {
   # ASan and CFG leads to slow process startup. Chromium's test runner uses
   # lots of child processes, so this means things are really slow. Disable CFG
   # for now. https://crbug.com/846966
-  if (!is_debug && !is_asan) {
+  if (!is_debug && !is_asan && !is_mingw) {
     # Turn on CFG bitmap generation and CFG load config.
     ldflags = [ "/guard:cf" ]
   }
@@ -457,20 +477,22 @@ config("delayloads_not_for_child_dll") {
 # See https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx for a reference of
 # what each value does.
 config("default_crt") {
-  if (is_component_build) {
-    # Component mode: dynamic CRT. Since the library is shared, it requires
-    # exceptions or will give errors about things not matching, so keep
-    # exceptions on.
-    configs = [ ":dynamic_crt" ]
-  } else {
-    if (current_os == "winuwp") {
-      # https://blogs.msdn.microsoft.com/vcblog/2014/06/10/the-great-c-runtime-crt-refactoring/
-      # contains a details explanation of what is happening with the Windows
-      # CRT in Visual Studio releases related to Windows store applications.
+  if (!is_mingw) {
+    if (is_component_build) {
+      # Component mode: dynamic CRT. Since the library is shared, it requires
+      # exceptions or will give errors about things not matching, so keep
+      # exceptions on.
       configs = [ ":dynamic_crt" ]
     } else {
-      # Desktop Windows: static CRT.
-      configs = [ ":static_crt" ]
+      if (current_os == "winuwp") {
+        # https://blogs.msdn.microsoft.com/vcblog/2014/06/10/the-great-c-runtime-crt-refactoring/
+        # contains a details explanation of what is happening with the Windows
+        # CRT in Visual Studio releases related to Windows store applications.
+        configs = [ ":dynamic_crt" ]
+      } else {
+        # Desktop Windows: static CRT.
+        configs = [ ":static_crt" ]
+      }
     }
   }
 }
@@ -532,42 +554,58 @@ config("static_crt") {
 if (current_cpu == "x64") {
   # The number after the comma is the minimum required OS version.
   # 5.02 = Windows Server 2003.
-  subsystem_version_suffix = ",5.02"
+  subsystem_version_suffix = "5.02"
 } else if (current_cpu == "arm64") {
   # Windows ARM64 requires Windows 10.
-  subsystem_version_suffix = ",10.0"
+  subsystem_version_suffix = "10.0"
 } else {
   # 5.01 = Windows XP.
-  subsystem_version_suffix = ",5.01"
+  subsystem_version_suffix = "5.01"
 }
 
 config("console") {
-  ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  if (is_mingw) {
+    if (!is_clang) {
+      cflags = [ "-mconsole" ]
+    }
+    ldflags = [ "-Wl,--subsystem,console:$subsystem_version_suffix" ]
+  } else {
+    ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  }
 }
 config("windowed") {
-  ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  if (is_mingw) {
+    if (!is_clang) {
+      cflags = [ "-mwindows" ]
+    }
+    ldflags = [ "-Wl,--subsystem,windows:$subsystem_version_suffix" ]
+  } else {
+    ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  }
 }
 
 # Incremental linking ----------------------------------------------------------
 
 # Applies incremental linking or not depending on the current configuration.
 config("default_incremental_linking") {
-  # Enable incremental linking for debug builds and all component builds - any
-  # builds where performance is not job one.
-  # TODO(thakis): Always turn this on with lld, no reason not to.
-  if (is_debug || is_component_build) {
-    ldflags = [ "/INCREMENTAL" ]
-    if (use_lld) {
-      # lld doesn't use ilk files and doesn't really have an incremental link
-      # mode; the only effect of the flag is that the .lib file timestamp isn't
-      # updated if the .lib doesn't change.
-      # TODO(thakis): Why pass /OPT:NOREF for lld, but not otherwise?
-      # TODO(thakis): /INCREMENTAL is on by default in link.exe, but not in
-      # lld.
-      ldflags += [ "/OPT:NOREF" ]
+  if (!is_mingw) {
+    # Enable incremental linking for debug builds and all component builds - any
+    # builds where performance is not job one.
+    # TODO(thakis): Always turn this on with lld, no reason not to.
+    if (is_debug || is_component_build) {
+      ldflags = [ "/INCREMENTAL" ]
+      if (use_lld) {
+        # lld doesn't use ilk files and doesn't really have an incremental link
+        # mode; the only effect of the flag is that the .lib file timestamp isn't
+        # updated if the .lib doesn't change.
+        # TODO(thakis): Why pass /OPT:NOREF for lld, but not otherwise?
+        # TODO(thakis): /INCREMENTAL is on by default in link.exe, but not in
+        # lld.
+        ldflags += [ "/OPT:NOREF" ]
+      }
+    } else {
+      ldflags = [ "/INCREMENTAL:NO" ]
     }
-  } else {
-    ldflags = [ "/INCREMENTAL:NO" ]
   }
 }
 
@@ -579,6 +617,9 @@ config("unicode") {
     "_UNICODE",
     "UNICODE",
   ]
+  if (is_mingw) {
+    cflags = [ "-municode" ]
+  }
 }
 
 # Lean and mean ----------------------------------------------------------------
@@ -599,3 +640,21 @@ config("lean_and_mean") {
 config("nominmax") {
   defines = [ "NOMINMAX" ]
 }
+
+# Let unit tests see all "for_testing" dll symbols.
+config("export_all_symbols") {
+  if(is_win && is_mingw){
+    ldflags = [ "-Wl,--export-all-symbols" ]
+  }
+}
+
+# Workaround a Mingw ld bug where large debug symbol data
+# causes the produced executable to be corrupted
+# https://stackoverflow.com/questions/22261539/ld-exe-crashing-in-mingw
+# this affects mksnapshot and v8 component.
+
+config("strip_all_symbols_at_link_time") {
+  if(is_win && is_mingw){
+    ldflags = [ "-Wl,--strip-all" ]
+  }
+}
diff --git a/config/win/manifest.gni b/config/win/manifest.gni
index e2115083f..91f8101df 100644
--- a/config/win/manifest.gni
+++ b/config/win/manifest.gni
@@ -85,12 +85,14 @@ if (is_win) {
       foreach(i, rebase_path(invoker.sources, root_build_dir)) {
         manifests += [ "/manifestinput:" + i ]
       }
-      ldflags = [
-                  "/manifest:embed",
+      if (!is_mingw) {
+        ldflags = [
+                    "/manifest:embed",
 
-                  # We handle UAC by adding explicit .manifest files instead.
-                  "/manifestuac:no",
-                ] + manifests
+                    # We handle UAC by adding explicit .manifest files instead.
+                    "/manifestuac:no",
+                  ] + manifests
+      }
     }
 
     # This source set only exists to add a dep on the invoker's deps and to
diff --git a/config/win/visual_studio_version.gni b/config/win/visual_studio_version.gni
index 982fbe8d3..d0dc3b108 100644
--- a/config/win/visual_studio_version.gni
+++ b/config/win/visual_studio_version.gni
@@ -22,18 +22,20 @@ declare_args() {
   windows_sdk_path = "C:\Program Files (x86)\Windows Kits\10"
 }
 
-if (visual_studio_path == "") {
-  toolchain_data =
-      exec_script("../../vs_toolchain.py", [ "get_toolchain_dir" ], "scope")
-  visual_studio_path = toolchain_data.vs_path
-  windows_sdk_path = toolchain_data.sdk_path
-  visual_studio_version = toolchain_data.vs_version
-  wdk_path = toolchain_data.wdk_dir
-  visual_studio_runtime_dirs = toolchain_data.runtime_dirs
-} else {
-  assert(visual_studio_version != "",
-         "You must set the visual_studio_version if you set the path")
-  assert(wdk_path != "",
-         "You must set the wdk_path if you set the visual studio path")
-  visual_studio_runtime_dirs = []
+if (!is_mingw) {
+  if (visual_studio_path == "") {
+    toolchain_data =
+        exec_script("../../vs_toolchain.py", [ "get_toolchain_dir" ], "scope")
+    visual_studio_path = toolchain_data.vs_path
+    windows_sdk_path = toolchain_data.sdk_path
+    visual_studio_version = toolchain_data.vs_version
+    wdk_path = toolchain_data.wdk_dir
+    visual_studio_runtime_dirs = toolchain_data.runtime_dirs
+  } else {
+    assert(visual_studio_version != "",
+           "You must set the visual_studio_version if you set the path")
+    assert(wdk_path != "",
+           "You must set the wdk_path if you set the visual studio path")
+    visual_studio_runtime_dirs = []
+  }
 }
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index 0bfa64ce1..149aaa4f8 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -61,6 +61,7 @@ if (enable_resource_allowlist_generation) {
 #  - cc
 #  - cxx
 #  - ld
+# - rc (mingw only)
 #
 # Optional parameters that control the tools:
 #
@@ -114,6 +115,10 @@ template("gcc_toolchain") {
     assert(defined(invoker.cxx), "gcc_toolchain() must specify a \"cxx\" value")
     assert(defined(invoker.ld), "gcc_toolchain() must specify a \"ld\" value")
 
+    if (is_mingw) {
+      assert(defined(invoker.rc), "gcc_toolchain() must specify a \"rc\" value")
+    }
+
     # This define changes when the toolchain changes, forcing a rebuild.
     # Nothing should ever use this define.
     if (defined(invoker.rebuild_define)) {
@@ -283,15 +288,19 @@ template("gcc_toolchain") {
     asm = asm_prefix + invoker.cc
     ar = invoker.ar
     ld = link_prefix + invoker.ld
-    if (defined(invoker.readelf)) {
-      readelf = invoker.readelf
+    if (!is_mingw){
+      if (defined(invoker.readelf)) {
+        readelf = invoker.readelf
+      } else {
+        readelf = "readelf"
+      }
+      if (defined(invoker.nm)) {
+        nm = invoker.nm
+      } else {
+        nm = "nm"
+      }
     } else {
-      readelf = "readelf"
-    }
-    if (defined(invoker.nm)) {
-      nm = invoker.nm
-    } else {
-      nm = "nm"
+      rc = invoker.rc
     }
     if (defined(invoker.dwp)) {
       dwp_switch = " --dwp=\"${invoker.dwp}\""
@@ -391,6 +400,16 @@ template("gcc_toolchain") {
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
     }
 
+    if (is_mingw) {
+      tool("rc") {
+        depfile = "{{output}}.d"
+        command = "$rc -i {{source}} -o {{output}}"
+        depsformat = "gcc"
+        description = "RC {{output}}"
+        outputs = [ "$object_subdir/{{source_name_part}}.o" ]
+      }
+    }
+
     tool("alink") {
       if (current_os == "aix") {
         # AIX does not support either -D (deterministic output) or response
@@ -448,7 +467,6 @@ template("gcc_toolchain") {
         # -soname flag is not available on aix ld
         soname_flag = "-Wl,-soname=\"$soname\""
       }
-      link_command = "$ld -shared $soname_flag {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" @\"$rspfile\""
 
       # Generate a map file to be used for binary size analysis.
       # Map file adds ~10% to the link time on a z620.
@@ -459,13 +477,40 @@ template("gcc_toolchain") {
         map_switch = " --map-file \"$map_file\""
       }
 
-      assert(defined(readelf), "to solink you must have a readelf")
-      assert(defined(nm), "to solink you must have an nm")
       strip_switch = ""
       if (defined(invoker.strip)) {
         strip_switch = "--strip=${invoker.strip} "
       }
 
+      mingw_flags = ""
+      soname_flags = "-Wl,-soname=\"$soname\""
+      if (is_mingw){
+        # Have MinGW linker generate a .def file and a .a import library
+        mingw_flags = ""
+        if (!is_clang){
+          mingw_flags += " -Wl,--dll "
+        }
+        mingw_flags += " -Wl,--output-def=\"$sofile\".def -Wl,--out-implib=\"$sofile\".a "
+        readelf = ""
+        if (defined(invoker.readelf)) {
+          readelf = "${invoker.readelf} "
+        }
+        nm = ""
+        if (defined(invoker.nm)) {
+          readelf = "${invoker.nm} "
+        }
+        if (is_clang) {
+          # Clang on Windows does not support the -soname flag.
+          soname_flags = ""
+        }
+      } else {
+        assert(defined(readelf), "to solink you must have a readelf")
+        assert(defined(nm), "to solink you must have an nm")
+      }
+
+      link_command = "$ld -shared ${soname_flags} ${mingw_flags} {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" @\"$rspfile\""
+
+
       # This needs a Python script to avoid using a complex shell command
       # requiring sh control structures, pipelines, and POSIX utilities.
       # The host might not have a POSIX shell and utilities (e.g. Windows).
diff --git a/toolchain/win/BUILD.gn b/toolchain/win/BUILD.gn
index 52624a7d5..10e4fa796 100644
--- a/toolchain/win/BUILD.gn
+++ b/toolchain/win/BUILD.gn
@@ -4,6 +4,7 @@
 
 import("//build/config/win/visual_studio_version.gni")
 import("//build/toolchain/win/toolchain.gni")
+import("//build/toolchain/gcc_toolchain.gni")
 
 assert(is_win, "Should only be running on Windows")
 
@@ -21,16 +22,18 @@ if (current_toolchain == default_toolchain) {
   } else {
     configuration_name = "Release"
   }
-  exec_script("../../vs_toolchain.py",
-              [
-                "copy_dlls",
-                rebase_path(root_build_dir),
-                configuration_name,
-                target_cpu,
-              ])
+  if (!is_mingw) {
+    exec_script("../../vs_toolchain.py",
+                [
+                  "copy_dlls",
+                  rebase_path(root_build_dir),
+                  configuration_name,
+                  target_cpu,
+                ])
+  }
 }
 
-if (target_cpu == "x86" || target_cpu == "x64") {
+if (!is_mingw && (target_cpu == "x86" || target_cpu == "x64")) {
   win_toolchains("x86") {
     toolchain_arch = "x86"
   }
@@ -39,7 +42,7 @@ if (target_cpu == "x86" || target_cpu == "x64") {
   }
 }
 
-if (target_cpu == "arm64") {
+if (!is_mingw && target_cpu == "arm64") {
   win_toolchains("arm64") {
     toolchain_arch = "arm64"
   }
@@ -53,10 +56,12 @@ if (target_cpu == "arm64") {
 # The only reason it's a separate toolchain is so that it can force
 # is_component_build to false in the toolchain_args() block, because
 # building nacl64.exe in component style does not work.
-win_toolchains("nacl_win64") {
-  toolchain_arch = "x64"
-  toolchain_args = {
-    is_component_build = false
+if (!is_mingw) {
+  win_toolchains("nacl_win64") {
+    toolchain_arch = "x64"
+    toolchain_args = {
+      is_component_build = false
+    }
   }
 }
 
@@ -87,3 +92,35 @@ if (target_os == "winuwp") {
     }
   }
 }
+
+template("mingw_toolchain") {
+  gcc_toolchain("mingw_" + target_name) {
+    forward_variables_from(invoker, "*")
+    cc = getenv("CC")
+    if (cc == "") {
+      cc = "gcc"
+    }
+    cxx = getenv("CXX")
+    if (cxx == "") {
+      cxx = "g++"
+    }
+    ar = getenv("AR")
+    if (ar == "") {
+      ar = "ar"
+    }
+    ld = cxx
+    rc = "windres"
+    strip = "strip"
+    executable_extension = ".exe"
+    toolchain_args = {
+      current_cpu = target_name
+      current_os = "win"
+    }
+  }
+}
+
+mingw_toolchain("x64") {
+}
+
+mingw_toolchain("x86") {
+}
diff --git a/win/BUILD.gn b/win/BUILD.gn
index d449f5925..558e04229 100644
--- a/win/BUILD.gn
+++ b/win/BUILD.gn
@@ -16,7 +16,7 @@ windows_manifest("default_exe_manifest") {
   ]
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   assert(host_os != "mac" || target_cpu != "x86",
          "Windows cross-builds from Mac must be 64-bit.")
 
@@ -92,7 +92,7 @@ if (is_win) {
 
   group("runtime_libs") {
     data = []
-    if (is_component_build) {
+    if (is_component_build && !is_mingw) {
       # Copy the VS runtime DLLs into the isolate so that they don't have to be
       # preinstalled on the target machine. The debug runtimes have a "d" at
       # the end.
-- 
2.37.2

